openapi: 3.0.1
info:
  version: 1.0.0
  title: Wesog Search API
  description: |
    Welcome to the Wesog Search API documentation!
    Unleash the full potential of your digital assets with Wesog Search,
    a tool designed to revolutionize your search capabilities in ways you've never seen before.

    # Getting Started

    The Wesog Search API is organized into two main sections:

    - **[Manage Your Images](/doc/#tag/manage-your-images)**: This section includes all endpoints
      for uploading, modifying, and deleting your images within Wesog Search.
      Enhance your visuals with our advanced AI semantics and Celebrity Recognition technology.
    - **[Search Your Images](/doc/#tag/search-your-images)**: Here, you'll find all the endpoints
      needed to create a custom search engine. Integrate it seamlessly into your applications
      to elevate user experience and functionality.

    Dive into our documentation to discover how Wesog Search can transform your image management and retrieval processes.
  contact:
    email: javi@wesog.com
    name: Javier Abell√°n
    url: 'https://wesog.com/'
  termsOfService: ''
  license:
    name: Legal
    url: 'https://wesog.com/es/aviso-legal/'
servers:
  - url: 'https://search.wesog.com/api/v1'
    description: Wesog Search Server
paths:
  /imgs:
    get:
      operationId: getImages
      summary: Get saved images
      description: Get saved images information.
      tags:
        - Manage your images
      responses:
        '200':
          description: OK - Successful request with response body
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IMAGE'
        '400':
          description: Bad Request - Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                title: GetStatusOfAnAsyncOperationBadRequest
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        message:
                          type: string
                      required:
                        - field
                        - message
                  message:
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    default: error
                required:
                  - message
                  - status
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_401'
        '403':
          description: Forbidden - Authenticated but not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_403'
        '404':
          description: Not Found - Resource doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_404'
        '500':
          description: Internal Server Error - Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_500'
      security:
        - API-WESOG-SEARCH: []
    post:
      operationId: uploadNewImages
      summary: Upload new images
      description: Endpoint for insert new images inside Wesog Search.
      tags:
        - Manage your images
      security:
        - API-WESOG-SEARCH: []
      parameters:
        - $ref: '#/components/parameters/param_wait'
        - $ref: '#/components/parameters/param_all'
        - $ref: '#/components/parameters/param_strict_post'
        - $ref: '#/components/parameters/param_urgent'
      requestBody:
        description: 'List of image objects. For each image object, the `id` and `src` fields are required, while the other fields are optional.'
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IMAGE'
                required:
                  - id
                  - src
      responses:
        '201':
          description: Created - Resource successfully created
          content:
            application/json:
              schema:
                type: object
                title: UploadNewImagesCreated
                properties:
                  data:
                    type: object
                  status:
                    type: string
                    enum:
                      - success
                    default: success
                required:
                  - data
                  - status
        '202':
          description: Accepted - Request accepted for processing
          content:
            application/json:
              schema:
                type: object
                title: UploadNewImagesAccepted
                properties:
                  message:
                    type: string
                    enum:
                      - Accepted
                    default: Accepted
                  status:
                    type: string
                    enum:
                      - success
                    default: success
                required:
                  - message
                  - status
        '400':
          description: Bad Request - Invalid request body
          content:
            application/json:
              schema:
                type: object
                title: UploadNewImagesBadRequest
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        message:
                          type: string
                      required:
                        - field
                        - message
                  message:
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    default: error
                required:
                  - message
                  - status
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_401'
        '403':
          description: Forbidden - Authenticated but not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_403'
        '409':
          description: Conflict - Resource already exists
          content:
            application/json:
              schema:
                type: object
                title: UploadNewImagesConflict
                properties:
                  message:
                    type: string
                    enum:
                      - Conflict
                    default: Conflict
                  status:
                    type: string
                    enum:
                      - error
                    default: error
                required:
                  - message
                  - status
        '422':
          description: Unprocessable Entity - Validation errors
          content:
            application/json:
              schema:
                type: object
                title: UploadNewImagesUnprocessableEntity
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        message:
                          type: string
                      required:
                        - field
                        - message
                  message:
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    default: error
                required:
                  - errors
                  - message
                  - status
        '500':
          description: Internal Server Error - Unexpected server error
          content:
            application/json:
              schema:
                type: object
                title: UploadNewImagesInternalServerError
                properties:
                  message:
                    type: string
                    enum:
                      - Internal Server Error
                    default: Internal Server Error
                  status:
                    type: string
                    enum:
                      - error
                    default: error
                required:
                  - message
                  - status
    put:
      operationId: updateExistingImages
      summary: Update existing images
      description: Endpoint for modify existing images already uploaded before.
      tags:
        - Manage your images
      security:
        - API-WESOG-SEARCH: []
      parameters:
        - $ref: '#/components/parameters/param_wait'
        - $ref: '#/components/parameters/param_all'
        - $ref: '#/components/parameters/param_strict_put'
        - $ref: '#/components/parameters/param_urgent'
      requestBody:
        description: 'List of image objects. For each image object, the `id` field is required, while the other fields are optional.'
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IMAGE'
                required:
                  - id
      responses:
        '200':
          description: OK - Resource successfully updated
          content:
            application/json:
              schema:
                type: object
                title: UpdateExistingImagesOk
                properties:
                  data:
                    type: object
                  status:
                    type: string
                    enum:
                      - success
                    default: success
                required:
                  - data
                  - status
        '204':
          description: No Content - Successful update with no response body
        '400':
          description: Bad Request - Invalid request body
          content:
            application/json:
              schema:
                type: object
                title: UpdateExistingImagesBadRequest
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        message:
                          type: string
                      required:
                        - field
                        - message
                  message:
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    default: error
                required:
                  - message
                  - status
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_401'
        '403':
          description: Forbidden - Authenticated but not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_403'
        '404':
          description: Not Found - Resource doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_404'
        '409':
          description: Conflict - Version conflict
          content:
            application/json:
              schema:
                type: object
                title: UpdateExistingImagesConflict
                properties:
                  message:
                    type: string
                    enum:
                      - Conflict
                    default: Conflict
                  status:
                    type: string
                    enum:
                      - error
                    default: error
                required:
                  - message
                  - status
        '422':
          description: Unprocessable Entity - Validation errors
          content:
            application/json:
              schema:
                type: object
                title: UpdateExistingImagesUnprocessableEntity
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        message:
                          type: string
                      required:
                        - field
                        - message
                  message:
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    default: error
                required:
                  - errors
                  - message
                  - status
        '500':
          description: Internal Server Error - Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_500'
    delete:
      tags:
        - Manage your images
      operationId: deleteExistingImages
      summary: Delete existing images
      description: Endpoint for erase existing images already uploaded before.
      parameters:
        - $ref: '#/components/parameters/param_wait'
        - $ref: '#/components/parameters/param_all'
        - $ref: '#/components/parameters/param_strict_delete'
        - $ref: '#/components/parameters/param_urgent'
      responses:
        '204':
          description: No Content - Resource successfully deleted
        '400':
          description: Bad Request - Invalid request
          content:
            application/json:
              schema:
                type: object
                title: DeleteExistingImagesBadRequest
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        message:
                          type: string
                      required:
                        - field
                        - message
                  message:
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    default: error
                required:
                  - message
                  - status
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_401'
        '403':
          description: Forbidden - Authenticated but not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_403'
        '404':
          description: Not Found - Resource doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_404'
        '500':
          description: Internal Server Error - Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_500'
      security:
        - API-WESOG-SEARCH: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required:
                  - id
                properties:
                  id:
                    description: Unique identifier of the image
                    anyOf:
                      - type: string
                      - type: number
  '/imgs/{img_id}':
    get:
      operationId: getImageInfo
      summary: Get fields of an image.
      description: Get saved fields of a given image by id.
      tags:
        - Manage your images
      parameters:
        - name: img_id
          description: Image ID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK - Successful request with response body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IMAGE'
        '400':
          description: Bad Request - Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                title: GetStatusOfAnAsyncOperationBadRequest
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        message:
                          type: string
                      required:
                        - field
                        - message
                  message:
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    default: error
                required:
                  - message
                  - status
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_401'
        '403':
          description: Forbidden - Authenticated but not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_403'
        '404':
          description: Not Found - Resource doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_404'
        '500':
          description: Internal Server Error - Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_500'
      security:
        - API-WESOG-SEARCH: []
  '/ops/{op_id}':
    get:
      operationId: getStatusOfAnAsyncOperation
      summary: Get status of an async operation
      description: Get status of an asyncronous operations.
      tags:
        - Manage your images
      parameters:
        - name: op_id
          description: Operation ID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK - Successful request with response body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OPERATION'
        '204':
          description: No Content - Successful request with no response body
        '400':
          description: Bad Request - Invalid query parameters
          content:
            application/json:
              schema:
                type: object
                title: GetStatusOfAnAsyncOperationBadRequest
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                        message:
                          type: string
                      required:
                        - field
                        - message
                  message:
                    type: string
                  status:
                    type: string
                    enum:
                      - error
                    default: error
                required:
                  - message
                  - status
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_401'
        '403':
          description: Forbidden - Authenticated but not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_403'
        '404':
          description: Not Found - Resource doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_404'
        '500':
          description: Internal Server Error - Unexpected server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RESP_500'
      security:
        - API-WESOG-SEARCH: []
    parameters: []
  /search:
    get:
      operationId: search
      summary: Search for images
      description: 'Search for images with filters, sorting and pagination.'
      tags:
        - Search your images
      parameters:
        - name: q
          description: 'Query Filtering Formula. See Filters section in the documentation API guide to learn more abot the Query Filtering Formula syntax.'
          required: true
          in: query
          schema:
            type: string
            example: 'keyword=man && country=UK'
        - name: sort_by
          description: 'Sorting criteria. Note that sort_by=similarity only works if there are present "similary filters" on the Query Filtering Formula.'
          in: query
          schema:
            type: string
            example: similarity
            default: id
            enum:
              - id
              - src
              - height
              - width
              - headline
              - caption
              - date
              - author
              - location
              - city
              - country
              - medium
              - technique
              - n_faces
              - status
              - similarity
        - name: sort_order
          description: 'Ascending or descending sorting.'
          in: query
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
            example: asc
        - name: page
          description: 'Page number of the search results. 1 is the first page.'
          schema:
            type: integer
            default: 1
            minimum: 1
            maximum: 100000
            example: 1
          in: query
        - name: limit
          description: 'Number of search results per page.'
          in: query
          schema:
            type: integer
            minimum: 1
            default: 50
            example: 75
            maximum: 1000
        - name: fields
          description: 'Image fields (comma separated) that will appear in the search result. If not specified, only the image ID will be provided per image. Available fields are: id, src, height, width, headline, caption, keywords, date, author, location, city, country, medium, technique, status, n_faces.'
          in: query
          schema:
            type: string
            example: 'id, headline, keywords, height, width'
            default: id
        - name: facets
          description: 'Faceted Search. Facets (comma separated) that will appear in the search result. 20 is the defualt max number of options per facet. Available facets are: keywords, author, location, city, country, medium, technique, status.'
          in: query
          schema:
            type: string
            example: 'keywords, author'
            default: ""
        - name: count
          description: 'If true, includes the exact number of images in the search results. If not specified, num_images will be set to -1 in the response.'
          in: query
          schema:
            type: boolean
            example: true
            default: false
        - name: lang
          description: 'Language. Specifies the language used by the Query Filtering Formula for text search. Default: English (en). Available languages include Spanish (es), German (de), Portuguese (pt), Italian (it), and French (fr).'
          in: query
          schema:
            type: string
            example: en
            default: en
            enum:
              - en
              - es
              - de
              - pt
              - it
              - fr
      responses:
        '200':
          description: OK - Successful search with content
          content:
            application/json:
              schema:
                type: object
                title: SearchForImagesOk
                properties:
                  images:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                  num_images:
                    type: integer
                  facets:
                    type: object
        '204':
          description: OK - Successful search without content
        '400':
          description: Bad Request - Invalid query parameters
        '401':
          description: Unauthorized - Authentication required
        '403':
          description: Forbidden - Authenticated but not authorized
  /query_img:
    post:
      operationId: uploadQuryImg
      summary: Upload query images
      description: |
        1st step of reverse image search. After uploading the image file into the HTTP body on request,
        the response return both:
        - `image_hash` Identifier for reference that image later in the `GET /imgs` to perform a reverse image search (2nd step).
        - `faces`: Face coordinates detected on the uploaded photo.
      tags:
        - Search your images
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: Image file to upload
                  format: binary
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  img_hash:
                    type: string
                    example: '10405030202'
                  faces:
                    type: array
                    items:
                      type: array
                      items:
                        type: number
        '400':
          description: Error in file upload
      security:
        - API-WESOG-SEARCH: []
tags:
  - name: Manage your images
    description: |
      To start using Wesog Search, upload your images. You can also update or delete them.
      - **Upload** new images: `POST /imgs`
      - **Update** existing images: `PUT /imgs`
      - **Delete** images: `DELETE /imgs`

      All operations can be performed synchronously or asynchronously.
      In asynchronous mode, you receive an operation ID immediately, and the process runs in the background.
      - **Track async** operation status: `GET /ops/{op_id}`
  - name: Search your images
    description: |
      After uploading images, you can start performing search queries. Wesog Search offers a single endpoint for all types of queries:
      - **Search** for images with filters, sorting, and pagination: `GET /imgs`

      To perform a reverse image search (using an external image as a query), upload the image first with the following endpoint:
      - **Upload query files** (e.g., images): `POST /query_files`
components:
  securitySchemes:
    API-WESOG-SEARCH:
      type: apiKey
      name: api-key
      in: header
  parameters:
    param_wait:
      name: wait
      description: >
        Enables 'Synchronous' mode. When set to true, the system will
        wait until the operation is completed before sending a response.
        If set to false, 'Asynchronous' mode is enabled, meaning an
        immediate response will be returned containing the operation ID
        to track the status of the operation. Defaults to false.
      in: query
      required: false
      schema:
        type: boolean
    param_all:
      name: all
      description: >
        Enables 'All or Nothing' mode. When set to true, the operation
        will only succeed if all items are successfully saved.
        If set to false, the operation may still succeed and save some items
        even if others fail to save. Defaults to false.
      in: query
      required: false
      schema:
        type: boolean
    param_strict_post:
      name: strict
      description: >
        Enables 'Strict' mode for Insert Operations.
        When set to true, the operation strictly performs an insert operation;
        it will fail if an image with the same ID already exists in the database.
        If set to false, the operation is more flexible, allowing
        for the overwrite of an existing image with the same ID.
        This flexible operation is referred to as an 'Upsert' (insert or update).
        Defaults to false.
      in: query
      required: false
      schema:
        type: boolean
    param_strict_put:
      name: strict
      description: >
        Enables 'Strict' mode for Update Operations.
        When set to true, the operation strictly performs an update operation;
        it will fail if the specified image ID does not exist in the database.
        If set to false, the operation is more flexible, allowing for the
        creation of a new image if the specified ID does not already exist.
        This flexible operation is referred to as an 'Upsert' (insert or update).
        Defaults to false.
      in: query
      required: false
      schema:
        type: boolean
    param_strict_delete:
      name: strict
      description: >
        Enables 'Strict' mode for Delete Operations.
        When set to true, the deletion will only proceed
        if the specified image ID exists in the database;
        it will fail if the ID does not exist.
        If set to false, the operation is more tolerant,
        and the deletion request will not fail even if the image ID does not exist,
        effectively ignoring the absence of the specified ID. Defaults to false.
      in: query
      required: false
      schema:
        type: boolean
    param_urgent:
      name: urgent
      description: >
        Enables 'Faster' mode for Asynchronous Operations.
        When set to true, the operation is enqueued at the head of the pending task queue,
        allowing for sooner processing if many tasks were enqueued previously.
        If set to false, the operation is enqueued at the tail,
        maintaining the natural order of operations. Defaults to false.
      in: query
      required: false
      schema:
        type: boolean
  schemas:
    IMAGE:
      type: object
      properties:
        #### SPECIAL FIELDS
        id:
          description: Unique identifier of the image.
          anyOf:
            - type: string
            - type: number
        src:
          description: Url of the image.
          type: string
          format: uri
        #### TEXTUAL FIELDS
        headline:
          description: Short text describing the image.
          type: string
        caption:
          description: Long text describing the image.
          type: string
        #### DATE FIELDS
        date:
          description: Date of the image creation in year-month-day format. Capture date for photographies.
          type: string
          format: date
          example: '2024-10-19'
        #### CATEGORICAL FIELDS
        status:
          description: Current status of the image. Default 'Active' if not specified.
          type: string
          enum:
            - Active
            - Withdrawn
            - Reserved
            - RDA Only
          default: Active
        author:
          description: The name of the individual or entity responsible for creating the image, such as a photographer or painter.
          type: string
          example: Jane Doe
        provider:
          description: The identifier of the provider, which can be either a unique numeric ID or a descriptive name.
          anyOf:
            - type: number
              description: The unique numeric ID of the provider.
              example: 456
            - type: string
              description: The name of the provider.
              example: "Acme Inc."
        collection:
          description: A list of collections that the image belongs to, identified by either collection IDs or names.
          type: array
            items:
              anyOf:
                - type: number
                  description: The unique identifier for the collection.
                  example: 101
                - type: string
                  description: The name of the collection.
                  example: Street pics
        country:
          description: The name of the country.
          type: string
          example: United States
        city:
          description: The name of the city.
          type: string
          example: New York
        location:
          description: A detailed description of the location, complementing the specified country and city with additional details such as street address or notable landmarks.
          type: string
          example: 123 Main St, near Central Park
        medium:
          description: The material or substance used in the creation of the artwork or object. This field corresponds to various artistic mediums like oils, acrylics, or digital formats.
          type: string
          example: Oil on canvas
        technique:
          description: The specific method or process used in creating the artwork, reflecting the artist's unique approach or the traditional methods tied to certain mediums.
          type: string
          example: Drawing
        #### MULTICATEGORICAL FIELDS
        keywords:
          anyOf:
            - type: string
              description: string of keywords separated with ;
            - type: array
              items:
                type: string
          description: |-
            Keywords (tags) describing the image.
            If string is used (instead of array of strings) keywords must be separated with ;

    OPERATION:
      type: object
      title: GetStatusOfAnAsyncOperationOk
      properties:
        id:
          type: number
        type:
          type: string
          enum:
            - add
            - upd
            - del
            - multiple
        num_total:
          type: number
        num_processed:
          type: number
        num_saved:
          type: number
        do_wait:
          type: boolean
        do_urgent:
          type: boolean
        do_all:
          type: boolean
        do_strict:
          type: boolean
        finished:
          type: boolean
        all_saved:
          type: boolean
        date_created:
          type: string
          format: date
        date_finished:
          type: string
          format: date
        errors:
          type: array
          items:
            type: string
    RESP_401:
      type: object
      properties:
        message:
          type: string
          enum:
            - Unauthorized
          default: Unauthorized
        status:
          type: string
          enum:
            - error
          default: error
      required:
        - message
        - status
    RESP_403:
      type: object
      title: SearchForImagesForbidden
      properties:
        message:
          type: string
          enum:
            - Forbidden
          default: Forbidden
        status:
          type: string
          enum:
            - error
          default: error
      required:
        - message
        - status
    RESP_404:
      type: object
      properties:
        message:
          type: string
          enum:
            - Not Found
          default: Not Found
        status:
          type: string
          enum:
            - error
          default: error
      required:
        - message
        - status
    RESP_500:
      type: object
      properties:
        message:
          type: string
          enum:
            - Internal Server Error
          default: Internal Server Error
        status:
          type: string
          enum:
            - error
          default: error
      required:
        - message
        - status
security:
  - API-WESOG-SEARCH: []
